{"componentChunkName":"component---src-templates-post-tsx","path":"/cppClasses_7/","result":{"data":{"markdownRemark":{"html":"<p>this : 객체 자신을 가리키는 pointer</p>\n<p>특별히 선언하지 않아도 컴파일러에 의해 자동으로 정의되어 사용된다.</p>\n<h2 id=\"example1-인자와-데이터멤버-구분\" style=\"position:relative;\"><a href=\"#example1-%EC%9D%B8%EC%9E%90%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A9%A4%EB%B2%84-%EA%B5%AC%EB%B6%84\" aria-label=\"example1 인자와 데이터멤버 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example1: 인자와 데이터멤버 구분</h2>\n<p>기존엔 \"_\" 를 이용해서 인자와 데이터멤버를 구분했다. this를 통해 데이터 멤버를 가리키게 할 수 있다!</p>\n<p>즉, 데이터멤버와 같은 이름의 인자 사용가능!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Rectangle.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> leftTopX<span class=\"token punctuation\">,</span> leftTopY<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rightBottomX<span class=\"token punctuation\">,</span> rightBottomY<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setLeftTopX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> leftTopX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>leftTopX <span class=\"token operator\">=</span> leftTopX<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this->leftTopX는 private에 있는 데이터멤버를 가리킴.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setLeftTopY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> leftTopY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>leftTopY <span class=\"token operator\">=</span> leftTopY<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setRightBottomX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> rightBottomX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>rightBottomX <span class=\"token operator\">=</span> rightBottomX<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setRightBottomYX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> rightBottomY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>rightBottomY <span class=\"token operator\">=</span> rightBottomY<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<h2 id=\"example2-자신의-객체-그-자체\" style=\"position:relative;\"><a href=\"#example2-%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B0%9D%EC%B2%B4-%EA%B7%B8-%EC%9E%90%EC%B2%B4\" aria-label=\"example2 자신의 객체 그 자체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example2: 자신의 객체 그 자체!</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Rectangle.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    Rectangle<span class=\"token operator\">*</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        Rectangle<span class=\"token operator\">*</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Rectangle<span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">-></span><span class=\"token function\">setLeftTopX</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLeftTopX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">-></span><span class=\"token function\">setLeftTopY</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLeftTopY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">-></span><span class=\"token function\">setRightBottomX</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRightBottomX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">-></span><span class=\"token function\">setRightBottomY</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRightBottomY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 위의 copy()를 this를 사용해서 아래와 같이 정의할 수 있다.</span>\n    Rectangle<span class=\"token operator\">*</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// this는 포인터다. 자신의 객체값을 그대로 전달!</span>\n        <span class=\"token comment\">// 동일한 타입의 객체를 만들어냄 => copy constructor 호출.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> leftTopX <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>leftTopX\n            <span class=\"token operator\">&amp;&amp;</span> leftTopY <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>leftTopY\n            <span class=\"token operator\">&amp;&amp;</span> rightBottomX <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>rightBottomX\n            <span class=\"token operator\">&amp;&amp;</span> rightBottomY <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>rightBottomY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Rectangle r<span class=\"token punctuation\">;</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Rectangle<span class=\"token operator\">*</span> pR <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// r이라는 Rectangle과 똑같은 Rectangle을 만들어서 그에대한 pointer리턴!</span>\n    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>pR<span class=\"token operator\">-></span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// assert는 디버깅을 위한 에러검출 함수! ()안의 조건을 만족해야함! 그렇지 않으면 에러를 띄워 알려준다:)</span>\n\n    <span class=\"token keyword\">delete</span> pR<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//  new 연산자를 사용해서 만든 개체에 대해 삭제!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"example3\" style=\"position:relative;\"><a href=\"#example3\" aria-label=\"example3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example3:</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Rectangle r<span class=\"token punctuation\">;</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10 10 110 210</span>\n    <span class=\"token comment\">// 이동후->print : moveBy가 Rectangle을 호출해야지 print가능</span>\n\n    cout <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// expected: 30 30 130 230, but actually 20 20 120 220</span>\n    <span class=\"token comment\">// moveBy가 Rectangle객체로 return 하는지, reference로 return 하는지에 따라 결과가 달라질 수 있다.</span>\n    <span class=\"token comment\">// => moveBy후 또 moveBy: 원하는 결과를 위해서는 reference로 reture해야한다!</span>\n\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서,</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Rectangle.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">Rectangle_h</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    Rectangle<span class=\"token operator\">&amp;</span> <span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deltaX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> deltaY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Rectange<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> leftTopX <span class=\"token operator\">&lt;&lt;</span> leftTopY <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> rightBottomX <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> rightBottomY <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nRectangle<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Rectangle</span><span class=\"token operator\">::</span><span class=\"token function\">moveBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deltaX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> deltaY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// &amp;(reference)를 하지 않는다면, return되는 this는 자신이 아닌 copy가 될 수 있다.</span>\n    <span class=\"token function\">setLeftTop</span><span class=\"token punctuation\">(</span>leftTopX<span class=\"token operator\">+</span>deltaX<span class=\"token punctuation\">,</span> leftTopY<span class=\"token operator\">+</span>deltaY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setRightBottom</span><span class=\"token punctuation\">(</span>rightBottomX<span class=\"token operator\">+</span>deltaX<span class=\"token punctuation\">,</span> rightBottomY<span class=\"token operator\">+</span>deltaY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"this : 객체 자신을 가리키는 pointer 특별히 선언하지 않아도 컴파일러에 의해 자동으로 정의되어 사용된다. Example1: 인자와 데이터멤버 구분 기존엔 \"_\" 를 이용해서 인자와 데이터멤버를 구분했다. this를 통해 데이터 멤버를 가리…","tableOfContents":"<ul>\n<li><a href=\"/cppClasses_7/#example1-%EC%9D%B8%EC%9E%90%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A9%A4%EB%B2%84-%EA%B5%AC%EB%B6%84\">Example1: 인자와 데이터멤버 구분</a></li>\n<li><a href=\"/cppClasses_7/#example2-%EC%9E%90%EC%8B%A0%EC%9D%98-%EA%B0%9D%EC%B2%B4-%EA%B7%B8-%EC%9E%90%EC%B2%B4\">Example2: 자신의 객체 그 자체!</a></li>\n<li><a href=\"/cppClasses_7/#example3\">Example3:</a></li>\n</ul>","fields":{"slug":"/cppClasses_7/"},"frontmatter":{"title":"c++ Classes, this","date":"Apr 10, 2021","tags":["c++"],"keywords":["c++","class","this"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cppClasses_7/","series":[{"slug":"/cppClasses_1/","title":"c++ Classes, Definition of Classes","num":1},{"slug":"/cppClasses_2/","title":"c++ Classes, Data members 객체의 동적 생성","num":2},{"slug":"/cppClasses_3/","title":"c++ Classes, static data member & Static member function","num":3},{"slug":"/cppClasses_4/","title":"c++ Classes, 객체 데이터 멤버","num":4},{"slug":"/cppClasses_5/","title":"c++ Classes, 단방향 연결 리스트","num":5},{"slug":"/cppClasses_6/","title":"c++ Classes, 객체 데이터 멤버","num":6},{"slug":"/cppClasses_7/","title":"c++ Classes, this","num":7},{"slug":"/cppClasses_8/","title":"c++ Classes, Nested Classes","num":8},{"slug":"/cppClasses_9/","title":"c++ Classes, New features on classes since c++11","num":9},{"slug":"/cppClasses_10/","title":"c++ Classes, Information Hidiing","num":10}],"lastmod":"2021-04-10"}},"staticQueryHashes":["2027115977","694178885"]}