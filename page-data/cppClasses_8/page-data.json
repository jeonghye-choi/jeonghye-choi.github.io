{"componentChunkName":"component---src-templates-post-tsx","path":"/cppClasses_8/","result":{"data":{"markdownRemark":{"html":"<p>클래스 내부에 클래스 정의</p>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>가능은 하지만, 이럴 필요가 없으면 Point를 nested class로 하지 않는 것이 좋다!</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&lt;&lt;</span> x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> y<span class=\"token operator\">==</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    Point leftTop<span class=\"token punctuation\">,</span> rightBottom<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setLeftTop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        leftTop<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        leftTop<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setRightBototm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        RightBototm<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        RightBototm<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Rectangle<span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> leftTop<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>leftTop<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> rightBottom<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>rightBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> Rectangle<span class=\"token operator\">&amp;</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        leftTop<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> rightBottom<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Rectangle.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Rectangle r1<span class=\"token punctuation\">;</span>\n    r1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Rectangle r2<span class=\"token punctuation\">;</span>\n    r2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span><span class=\"token number\">210</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    r1<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    r2<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    string msg <span class=\"token operator\">=</span> r1<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"SAME\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"DIFFERENT\"</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n    Rectangle<span class=\"token operator\">::</span>Point pt<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Rectangle 내부의 Point!</span>\n    <span class=\"token comment\">//가능은 하지만, 이럴 필요가 없으면 Point를 nested class로 하지 않는 것이 좋다!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"클래스 내부에 클래스 정의 Example 가능은 하지만, 이럴 필요가 없으면 Point를 nested class로 하지 않는 것이 좋다!","tableOfContents":"<ul>\n<li><a href=\"/cppClasses_8/#example\">Example</a></li>\n</ul>","fields":{"slug":"/cppClasses_8/"},"frontmatter":{"title":"c++ Classes, Nested Classes","date":"Apr 10, 2021","tags":["c++"],"keywords":["c++","class","nested classes"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/cppClasses_8/","series":[{"slug":"/cppClasses_1/","title":"c++ Classes, Definition of Classes","num":1},{"slug":"/cppClasses_2/","title":"c++ Classes, Data members 객체의 동적 생성","num":2},{"slug":"/cppClasses_3/","title":"c++ Classes, static data member & Static member function","num":3},{"slug":"/cppClasses_4/","title":"c++ Classes, 객체 데이터 멤버","num":4},{"slug":"/cppClasses_5/","title":"c++ Classes, 단방향 연결 리스트","num":5},{"slug":"/cppClasses_6/","title":"c++ Classes, 객체 데이터 멤버","num":6},{"slug":"/cppClasses_7/","title":"c++ Classes, this","num":7},{"slug":"/cppClasses_8/","title":"c++ Classes, Nested Classes","num":8},{"slug":"/cppClasses_9/","title":"c++ Classes, New features on classes since c++11","num":9},{"slug":"/cppClasses_10/","title":"c++ Classes, Information Hidiing","num":10}],"lastmod":"2021-04-10"}},"staticQueryHashes":["2027115977","694178885"]}